数据分析模块
1. 数据分析概述
    数据分析分类：
        1. 预测：基于已有的数据集和结论，对未知的数据集|没有结论的数据集进行预测
            1. 回归：数值型的结论的预测
            2. 分类：类别型的结论的预测(二分类、多分类)
        2. 划分：基于已有的数据集，对该数据集中的数据进行归类
            1. 聚类：对已有数据集中的数据进行类别划分
    数据分析的流程
        1. 需求分析
      -- Python Spider
        2. 数据获取
      -- Python numpy\pandaa\matplotlib\sklearn
        3. 数据预处理
        4. 模型的选取
        5. 模型的评价&优化
        5. 实施&部署
    数据分析的环境配置
        1. 安装数据分析的 3 模块
            1. numpy ： pip instll -U numpy
            2. pandas : pip instll -U pandas
            3. matplotlib : pip install -U matplotlib
        2. 安装数据分析的工具
            1. Jupyter notebook 
                pip install -U jupyter
                可选：
                pip install jupyterlab
            2. Jupyter notebook 使用
2. Numpy 
    0. what
        数组概念&使用、数组运算
        使用 numpy 进行数据分析 == 数据探查
    1. 数组(一维|多维)概念以及使用 -- ndarray==数组(一维数组、二维数组=矩阵、多维数组)
        创建数组 == 获取|修改(shape 属性)数组的属性
            1 - Python list 语法 === [x,x,x...]   [ [x,x,x...], [x,x,x...] ... ]
            2 - Numpy 函数 == 范围、全零|1、对角线、log函数
        数据类型转换&创建数据类型
            1 - 转换：借助 Numpy中的类型转换函数实现
            2 - 创建&应用 
                创建： Numpy np.dtype
                应用： 创建数组时， 借助 dtype 参数指定使用自定义的创建的数据类型
        向数组中填充数据、同时也是创建数组 === 数组整体数据的生成
            随机数生成函数
        借助索引(数组下标)操作数组(数组元素) === 数组个体(数组元素)数据的操作
            数组索引，位置均从 0 开始
            借助数组索引，定位到指定数组元素，对其进行读|写(可以一次性读写多个数组元素)
            一维数组索引： === 使用一个 []
                形式： 
                    [位置 - >0 : 从左边界开始定位 、 <0 : 从右边界开始定位]            === 定位到 1 个元素
                    [切片 = 起始位置(如果不写，默认从 0 开始) : 不包含的终止位置(如果不写，默认到最后一个元素)]       === 定位到 n 个元素 
            多维(二维)数组索引： === 使用两个 [行标][列标]  或 [行标, 列标]
                [位置]
                [切片]
                完成 行坐标，列坐标的组合， 对应位置的组合
          -- 扩展：借助切片形式完成数组的逆序输出，可以用于排序后逆序输出，相当于逆序排序
            一维数组借助切片索引逆序输出：  print（arr[::-1])
            二维数组借助切片索引逆序输出：
                行序不变，每行的列元素逆序输出： print(arr[::1, ::-1])
                行序逆序，每行的列元素不变输出： print(arr[::-1, ::1])
                行序逆序，同时每行的列元素逆序输出： print(arr[::-1, ::-1])
        对数组进行简单操作：
            1. 一维数组 ==>> 二维数组
                reshape == 改为指定行、列的二维数组
            2. 二维数组
            展平：二维数组 ==>> 一维数组 
                ravel === 横向展平 - 行的拼接
                flatten === 指定展平方向
                    横向(默认) 同 ravel
                    纵向('F') - 列的拼接
            组合：
                hstack、vstack、concatenate《axis：1=横向、0=纵向》
            切分：
                hsplit、vsplit、split《axis：1=横向、0=纵向》
    2. 面向数组的运算
        1. 矩阵(二维数组) == 生成、操作
            1. 创建矩阵
                --- 如何描述元素之间的间隔？
                字符串形式给出初始值
                    matr1 = np.mat("1 2 3;4 5 6;7 8 9")
                数组形式给出初始值：
                    matr2 = np.matrix([[1,2,3],[4,5,6],[7,8,9]])
                数组的拼接：
                    matr3 = np.bmat("arr1 arr2; arr1 arr2")
            2. 操作矩阵
                1. 数学计算
                    加、减、乘(矩阵相乘、矩阵乘数字、矩阵对应元素相乘)
                2. 特定计算
                    转置、共轭转置、求逆、转换为二维数组
        2. 数组运算 - ufunc
            可以对 Numpy 的数组进行整体操作，效率高。
            常见计算(维度、个数一致)
                算术(每个元素分别计算，获取各自的结果)、关系(每个元素分别计算，获取各自的结果)、逻辑(整体，得到一个结果)
            特殊扩展(算术)计算(维度、个数不一致)
                不足补1、结果维度取最大维度、只能是相同维度或者维度为1才能进行扩展计算、维度为1的数组参与扩展计算时需要复制扩充
                    复制扩充：横向 或者 纵向

3. 使用 Numpy 进行数据分析 -- 统计分析、数据探查
    1. Numpy 文件读写、统计
        1. 文件读写 
            -- 二进制文件读写
            1. 将数组保存到指定位置，需要指明保存的文件名、要保存的数组
                np.save("d:/save_arr", arr)             # 保存 1 个数组  .npy
                np.savez("d:/savez_arr", arr1, arr2)    # 保存 n 个数组  .npz
                    保存的文件是特定格式的二进制文件
            2. 从特定位置(已经保存的二进制文件)读入已保存的数组
                -- 读入保存单一数组的文件
                loaded_data = np.load("d:/save_arr.npy")
                -- 读入保存多个数组的文件，并使用['arr_0\1\2...']依次获取其中的每一个保存的数组
                loaded_data1 = np.load("d:/savez_arr.npz")
                loaded_data1_1 = loaded_data1['arr_0']
                loaded_data1_2 = loaded_data1['arr_1']
                    读入的文件是特定格式的二进制文件
            -- 文本文件读写 == txt、csv
            1. 将数组保存到指定位置，需要指明保存的文件名、要保存的数组
                np.savetxt("d:/arr.txt", arr)
                np.savetxt("d:/arr.txt", arr, fmt="%.2f", delimiter=",")
                np.savetxt("d:/arr.txt", arr, fmt="%d", delimiter=",")
                    保存的文件是文本文件，
                    默认使用空格间隔每个元素、每个元素按照默认的格式显示
                    可以借助参数指定格式和分隔符
            2. 从特定位置(已经保存的文本文件)读入已保存的数组 --  读入时可以进行缺失值判断
                loaded_data = np.loadtxt("d:/arr.txt", delimiter=",")
                    读入的文件是文本文件，同时使用指定的分隔符来区分每个元素
        2. 统计函数
            1. 排序
              -- axis=1为横向|沿横轴排序； axis=0为纵向|沿纵轴排序。
                    一维数组默认对所有元素横向排序，二维数组默认对每一行的元素横向排序
                1. 直接排序： 对元素进行排序，返回排序后的元素的值的列表
                        sort函数没有返回值，会修改原始的数组为排好序的数组。
                    API： https://numpy.org/doc/stable/reference/generated/numpy.sort.html
                      语法： ndarray.sort(axis=-1, kind='quicksort', order=None)
                        参数      描述
                        axis    排序沿数组的（轴）方向，0表示按行，1表示按列，None表示展开来排序，默认值为-1，表示沿最后的轴排序
                        kind    排序的算法，提供了快排'quicksort'、混排'mergesort'、堆排'heapsort'， 默认为‘quicksort'
                        order   排序的字段名，可指定字段排序，默认为None
                    一维数组：
                        arr.sort()  #直接排序、横向排序
                    二维数组：
                        arr.sort()  #直接排序、默认对每一行的元素横向排序
                        arr.sort(axis = 1)  #直接排序、沿着横轴排序、同默认
                        arr.sort(axis = 0)  #直接排序、沿着纵轴排序、按每列的元素纵向排序
                2. 间接排序(每维|行单独排序，多用于一维数组)： 对元素进行排序，返回排序后的元素的位置(下标)的列表，不修改原始数组
                        argsort函数返回值为重新排序值的下标列表，列表的每一项表示排序后该位置的元素对应原数组中的元素的下标。
                            数组沿给定轴执行间接排序，并使用指定排序类型返回数据的索引数组。 这个索引数组用于构造排序后的数组。
                    API: https://numpy.org/doc/stable/reference/generated/numpy.argsort.html
                      语法： numpy.argsort(a, axis=-1, kind='quicksort', order=None)
                        参数类似于sort()
                    一维数组： 
                        arr = np.array([2,3,6,8,0,7])
                        print('创建的数组为：',arr)
                        print('排序后数组为：',arr.argsort()) 
                            结果： 排序后数组为： [4 0 1 2 5 3]
                    二维数组： -- 类似之前
                        arr = np.random.randint(1,10,size = (3,3)) 
                        print(arr)
                        arr_index = arr.argsort(axis=1)  或者： arr_index = arr.argsort(axis=0)
                        print(arr_index)
                3. 间接排序(每维同列联合排序，即：多关键字排序，如成绩表：总分相同，看数学，数学相同看英语...)
                        lexsort()根据键值的字典序进行排序，
                        支持对数组按指定行或列的顺序排序，间接排序，不修改原数组，返回索引。
                            默认按最后一行元素有小到大排序, 返回最后一行元素排序后索引所在位置。
                        一般对一维数组使用argsort()。
                    API: https://numpy.org/doc/stable/reference/generated/numpy.lexsort.html
                      语法: lexsort(keys, axis=-1)
                        参数      描述
                        'axis'  数组排序时的基准，axis=0，按行排列；axis=1，按列排列
                        'keys'  排序的参照物包括数组或包含N维的的元组，默认值为最后一行，（如果为二维数组则指最后一列(行？)）
                  -- 扩展：
                    1. 对二维数组 lexsort 
                        arr = np.array([[0,12,48],[4,18,14],[7,1,99]])
                        ix = np.lexsort(arr, axis=0)  # 此时不允许 axis=1，默认 axis=0
                        print(ix)
                        输出： [0 1 2]  === 输出最后一列的元素排序的下标
                    2. 多个同 shape 数组 
                      -- 排序a，a元素相同按同位置的b的元素排序
                        #将长度相同的a，b组合，再根据a值的大小进行排序，再考虑b值
                        a = np.array([1,5,1,4,3,4,4])
                        b = np.array([9,4,0,4,0,2,1])
                        ix = np.lexsort((b,a))
                        print(ix)
                        print(a[ix])
                        print(b[ix])
                        result = list(zip(a[ix], b[ix]))
                        print(result)
                        输出： 
                            [2 0 4 6 5 3 1]
                            [1 1 3 4 4 4 5]
                            [0 9 0 1 2 4 4]
                            [(1, 0), (1, 9), (3, 0), (4, 1), (4, 2), (4, 4), (5, 4)]
                      -- # 此种情况与先b后a的情况一致
                        c = [[1,5,1,4,3,4,4],[9,4,0,4,0,2,1]]
                        ix = np.lexsort(c)
                        print(ix)
                        print(len(ix))
                        for i in range(len(ix)):
                            print(c[1][ix[i]], c[0][ix[i]])
                        输出： 
                            [2 4 6 5 3 1 0]
                            7
                            0 1
                            0 3
                            1 4
                            2 4
                            4 4
                            4 5
                            9 1
                    #其他方法
                    #按最后一列顺序排序
                    >>x[np.lexsort(x.T)]
                    array([[ 4, 18, 14],
                           [ 0, 12, 48],
                           [ 7,  1, 99]])
                    #按最后一列逆序排序
                    >>x[np.lexsort(-x.T)] 
                    array([[ 7,  1, 99],
                           [ 0, 12, 48],
                           [ 4, 18, 14]])
                    #按第一列顺序排序
                    >>x[np.lexsort(x[:,::-1].T)]
                    array([[ 0, 12, 48],
                           [ 4, 18, 14],
                           [ 7,  1, 99]])
                    #按最后一行顺序排序
                    >>x.T[np.lexsort(x)].T 
                    array([[12,  0, 48],
                           [18,  4, 14],
                           [ 1,  7, 99]])
                    #按第一行顺序排序
                    >>x.T[np.lexsort(x[::-1,:])].T 
                    array([[ 0, 12, 48],
                           [ 4, 18, 14],
                           [ 7,  1, 99]])
            2. 去重与重复数据
                去重：
                    unique函数可以找出数组中的唯一值并返回已排序的结果
                        names = np.array(['小明', '小黄', '小花', '小明', '小花', '小兰', '小白'])
                        unique_names = np.unique(names)
                        等价于：
                        sorted_set_names = sorted(set(names))
                      去重也可以： set_names = set(names)  # 此结果不改变原始次序
                    例如：
                        names = np.array(['小明', '小黄', '小花', '小明', '小花', '小兰', '小白'])
                        unique_names = np.unique(names)
                        print(unique_names)
                        sorted_set_names = sorted(set(names))
                        print(sorted_set_names)
                        set_names = set(names)
                        print(set_names)
                        输出:
                            ['小兰' '小明' '小白' '小花' '小黄']
                            ['小兰', '小明', '小白', '小花', '小黄']
                            {'小明', '小黄', '小兰', '小花', '小白'}
                            ['小兰' '小明' '小白' '小花' '小黄']
                            ['小兰', '小明', '小白', '小花', '小黄']
                            {'小明', '小黄', '小兰', '小花', '小白'}
                        
                重复：
                    1. tile 整体重复函数，对数组整体进行重复操作
                        两个参数，参数“A”指定重复的数组，参数“reps”指定重复的次数。
                    2. repeat 个体重复函数，对数组中的每个元素进行重复操作
                        三个参数
                            参数“a”是需要重复的数组元素，
                            参数“repeats”是重复次数，
                            参数“axis”指定沿着哪个轴进行重复，
                                axis = 1 : 横向重复，即列元素的重复形成横向重复，即：表示对|按列进行元素重复；
                                axis = 0 : 纵向重复，即行元素的重复形成纵向重复，即：表示对|按行进行元素重复；
            3. 和、和、均值、各种方差、各种最值(索引)、累计和|积
                sum     计算数组的和
                mean    计算数组均值
                std     计算数组标准差
                var     计算数组方差
                min     计算数组最小值
                max     计算数组最大值
                argmin  返回数组最小元素的索引
                argmax  返回数组最小元素的索引
                cumsum  计算所有元素的累计和
                cumprod 计算所有元素的累计积


            
            ....